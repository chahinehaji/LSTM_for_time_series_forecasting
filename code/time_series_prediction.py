# -*- coding: utf-8 -*-
"""Time Series Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SCuEuoCCrzqT-qjnQomZMyYHMWKi9GZU

## Downloading data
"""

!wget https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv

"""## Preparing data"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib

import numpy
import keras
print(numpy.__version__)
print(keras.__version__)

dataset = pd.read_csv('/content/ECG5000_TRAIN.txt', sep=" ", header=None, error_bad_lines=False)
plt.figure(figsize=(18,10))
plt.plot(dataset.iloc[0, 0:1000])
plt.show()



import numpy
import math
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

# fix random seed for reproducibility
numpy.random.seed(7)

dataframe = pd.read_csv('/content/ECG5000_TRAIN.txt', sep=" ", header=None, error_bad_lines=False)
dataset = dataframe.iloc[:,0:2000].values
dataset = dataset.astype('float32')

dataframe.shape

dataset = dataset.T
dataset.shape

# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)

# split into train and test sets
train_size = int(len(dataset) * 0.67)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

"""## Create a dataset for RNNs architecture"""

def create_dataset(dataset, look_back=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
		dataX.append(a)
		dataY.append(dataset[i + look_back, 0])
	return numpy.array(dataX), numpy.array(dataY)

# reshape into X=t and Y=t+1
look_back = 13
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

# reshape input to be [samples, time steps, features]
trainX = numpy.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = numpy.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

"""## Live loss plotting"""

import keras
from IPython.display import clear_output

class PlotLosses(keras.callbacks.Callback):
    def on_train_begin(self, logs={}):
        self.i = 0
        self.x = []
        self.losses = []
        self.val_losses = []
        
        self.fig = plt.figure()
        
        self.logs = []

    def on_epoch_end(self, epoch, logs={}):
        
        self.logs.append(logs)
        self.x.append(self.i)
        self.losses.append(logs.get('loss'))
        self.val_losses.append(logs.get('val_loss'))
        self.i += 1
        
        clear_output(wait=True)
        plt.figure(figsize=(18,10))
        plt.plot(self.x, self.losses, label="loss")
        plt.plot(self.x, self.val_losses, label="val_loss")
        plt.legend()
        plt.show()
        
        print('loss = ' + str(logs.get('loss')))
        print('val_loss = ' + str(logs.get('val_loss')))
    
        
plot_losses = PlotLosses()

#from livelossplot.keras import PlotLossesCallback

# create and fit the LSTM network
model = Sequential()
model.add(LSTM(10, input_shape=(1, look_back), return_sequences=True))
model.add(LSTM(10, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

history = model.fit(trainX, trainY,validation_data=(testX, testY), callbacks=[plot_losses],epochs=50, batch_size=1, verbose=0)

print(history.history.keys())

# make predictions
trainPredict = model.predict(trainX)
testPredict = model.predict(testX)
# invert predictions
trainPredict = scaler.inverse_transform(trainPredict)
trainY = scaler.inverse_transform([trainY])
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])
# calculate root mean squared error
trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))
testScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))
print('Test Score: %.2f RMSE' % (testScore))

# shift train predictions for plotting
trainPredictPlot = numpy.empty_like(dataset)
trainPredictPlot[:, :] = numpy.nan
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict
# shift test predictions for plotting
testPredictPlot = numpy.empty_like(dataset)
testPredictPlot[:, :] = numpy.nan
testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict
# plot baseline and predictions
plt.figure(figsize=(18,10))
plt.plot(scaler.inverse_transform(dataset), label='original')
plt.plot(trainPredictPlot, label='predicted train')
plt.plot(testPredictPlot, label='predicted test')
plt.legend(loc='upper left')
plt.show()

